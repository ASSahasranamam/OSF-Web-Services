== Introduction ==

'''structWSF''' is a platform-independent Web services framework for accessing and exposing structured [http://techwiki.openstructs.org/index.php/RDF_Concept RDF] (Resource Description Framework) data. Its central organizing perspective is that of the dataset. These datasets contain instance records, with the structural relationships amongst the data and their attributes and concepts defined via ontologies (schema with accompanying vocabularies).

The structWSF middleware framework is [http://www.mkbergman.com/?p=499 generally] [http://techwiki.openstructs.org/index.php/REST_Concept RESTful] in design and is based on HTTP and Web protocols and open standards. The initial structWSF framework comes packaged with a baseline set of more than 20 Web services in [http://techwiki.openstructs.org/index.php/CRUD_Concept CRUD], browse, search, tagging, ontology management, and export and import. All Web services are exposed via APIs and SPARQL endpoints. Each request to an individual Web service returns an HTTP status and optionally a document of ''resultsets''. Each results document can be serialized in many ways, and may be expressed as either RDF, pure XML, JSON, or different flavors of [http://techwiki.openstructs.org/index.php/Introduction_to_irON irON].

In initial release, structWSF has direct interfaces to the [http://techwiki.openstructs.org/index.php/Virtuoso Virtuoso] RDF triple store (via ODBC, and later HTTP) and the [http://techwiki.openstructs.org/index.php/Solr Solr] faceted, full-text search engine(via HTTP). However, structWSF has been designed to be fully platform-independent. Support for additional datastores and engines are planned. The design also allows other specialized systems to be included, such as analysis or advanced inference engines.

The framework is open source (Apache 2 license) and designed for extensibility. structWSF and its extensions and enhancements are distributed and documented on the '''OpenStructs''' [http://openstructs.org/  Web site].

You can read more about [http://techwiki.openstructs.org/index.php/StructWSF structWSF here]

== Documentation ==

structWSF is fully documented on the [http://techwiki.openstructs.org Techwiki]. You can easily access all the documentation pages related to it by checking this [http://techwiki.openstructs.org/index.php/Category:StructWSF category section].

== Architecture ==

The general structWSF architecture is described in this [http://techwiki.openstructs.org/index.php/StructWSF_Architecture document page]. It also explains the echosystem in which it lives (and its related to other parts of the OSF (Open Semantic Framework) like [http://drupal.org/project/construct conStruct].

== Installing structWSF ==

{|
|-
| [https://github.com/structureddynamics/Open-Semantic-Framework-Installer Get started  quickly with structWSF by using the Open Semantic Framework Installer]
| [[File:http://dev.openstructs.org/imgs/osf_installer.png]]
|}

Additionally you can find debugging tips and support on the [http://groups.google.com/group/open-semantic-framework Mailing List]

== Upgrading structWSF ==

An existing structWSF instance can easily be upgrader using the [https://github.com/structureddynamics/Open-Semantic-Framework-Installer OSF-Installer].

Note: the version of the structWSF instance that should be minimally installed is version 2.0.0. If you have an older version than that, then you will have to manually upgrade your version to the version 2.0.0 and then you will have to run the OSF-Installer structWSF upgrader script.

== structWSF Web Services ==

Here is a complete list of all the web service endpoints currently available in structWSF:

* [http://techwiki.openstructs.org/index.php/Auth_Registrar:_Access Auth Registrar: Access]
* [http://techwiki.openstructs.org/index.php/Auth_Registrar:_WS Auth Registrar: WS]
* [http://techwiki.openstructs.org/index.php/Auth:_Lister Auth: Lister]
* [http://techwiki.openstructs.org/index.php/Auth:_Validator Auth: Validator]
* [http://techwiki.openstructs.org/index.php/Ontology_Create Ontology Create]
* [http://techwiki.openstructs.org/index.php/Ontology_Read Ontology Read]
* [http://techwiki.openstructs.org/index.php/Ontology_Update Ontology Update]
* [http://techwiki.openstructs.org/index.php/Ontology_Delete Ontology Delete]
* [http://techwiki.openstructs.org/index.php/Dataset:_Create Dataset: Create]
* [http://techwiki.openstructs.org/index.php/Dataset:_Read Dataset: Read]
* [http://techwiki.openstructs.org/index.php/Dataset:_Update Dataset: Update]
* [http://techwiki.openstructs.org/index.php/Dataset:_Delete Dataset: Delete]
* [http://techwiki.openstructs.org/index.php/CRUD:_Create CRUD: Create]
* [http://techwiki.openstructs.org/index.php/CRUD:_Read CRUD: Read]
* [http://techwiki.openstructs.org/index.php/CRUD:_Update CRUD: Update]
* [http://techwiki.openstructs.org/index.php/CRUD:_Delete CRUD: Delete]
* [http://techwiki.openstructs.org/index.php/Search Search]
* [http://techwiki.openstructs.org/index.php/SPARQL SPARQL]
* [http://techwiki.openstructs.org/index.php/Scones Scones]
* Tracker: Create
* [http://techwiki.openstructs.org/index.php/Converter:_commON Converter: commON] (import and export)
* [http://techwiki.openstructs.org/index.php/Converter:_irJSON Converter: irJSON] (import and export)
* [http://techwiki.openstructs.org/index.php/Converter:_BibTeX Converter: BibTeX] (import and export)
* [http://techwiki.openstructs.org/index.php/Converter:_TSV/CSV Converter: TSV/CSV] (import and export)

== How to Use Web Services Endpoint ==

The easiest way to get started is to use the [https://github.com/structureddynamics/structWSF-PHP-API structWSF-PHP-API] to create and send queries to any structWSF web service endpoint.

Another way is to redirectly send HTTP queries to any of the endpoints. [http://techwiki.openstructs.org/index.php/StructWSF_Web_Services_Tutorial A tutorial has been written that explains the basis principles of how to query the endpoints, and it also includes a series of basic usage explains].

== Developers ==

Developers and commiters to the Git repository should comply to the coding standards. An outline of the coding style is available in the Coding Standard folder. Additional requirements are listed in the README.mediawiki file in that folder. Finally, coding style is enforced b the PolyStyle code formatter application available here: http://polystyle.com.

==Auto-loading of Classes==

structWSF does comply with the [PSR-0 Standard Document](https://gist.github.com/1234504) 
for auto-loading the classes of the framework. The SplClassLoader class that has been developed by
the same group can be used as the classes auto-loader.
